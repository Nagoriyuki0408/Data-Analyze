# 导入numpy库，用于后续的数组操作
import numpy as np

# 创建一个一维数组t1，包含0到11的整数
t1 = np.arange(12)

# 打印t1数组的形状，此处为一维数组
print(t1.shape)

# 打印t1数组的内容
print(t1)

# 对t1数组进行形状重塑，转换为3行4列的二维数组，但此处未将重塑后的数组赋值给t1，因此t1的形状不会改变
t2 = t1.reshape(3, 4)

# 打印重塑后的数组，展示3行4列的二维数组形式
print(t1.reshape(3, 4))

# 创建并打印一个三维数组t5，包含24个元素，形状为2x3x4
t5 = np.arange(24).reshape(2, 3, 4)
print(t5)
print(t5 + 2)

# 创建并打印一个形状为24x1的二维数组t6，包含0到23的整数
t6 = np.arange(24).reshape(24, 1)
print(t6)

# 将t2数组重塑为一维数组，展示如何通过计算动态确定数组形状
t7 = t2.reshape((t2.shape[0] * t2.shape[1],))
print(t7)

# 打印t2数组的平铺版本，每个元素增加2，展示数组的flatten方法和元素级运算
print(t2.flatten() + 2)

# 创建并打印数组t8，形状为3x4，包含64到75的整数，展示如何创建指定范围和形状的数组
t8 = np.arange(64, 76).reshape(3, 4)

# 打印t2和t8数组的元素级乘积，展示数组间的元素级运算
print(t2 * t8)

# 创建并打印一个包含0到3的整数的一维数组t9
t9 = np.arange(4)

# 将t9数组重塑为4x1的二维数组，展示如何改变数组的形状
t10 = t9.reshape(4, 1)

# 打印t2和t9数组的元素级乘积，由于t9是一维数组，展示广播机制
print(t2 * t9)

# 打印t2和t10数组的元素级乘积，由于t10是二维数组，避免了广播
print(t2 * t10)